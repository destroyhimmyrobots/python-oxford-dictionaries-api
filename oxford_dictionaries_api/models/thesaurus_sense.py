# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from oxford_dictionaries_api.models.arrayofstrings import Arrayofstrings  # noqa: F401,E501
from oxford_dictionaries_api.models.examples_list import ExamplesList  # noqa: F401,E501
from oxford_dictionaries_api.models.synonyms_antonyms import SynonymsAntonyms  # noqa: F401,E501
from oxford_dictionaries_api.models.thesaurus_sense import ThesaurusSense  # noqa: F401,E501


class ThesaurusSense(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'antonyms': 'SynonymsAntonyms',
        'domains': 'Arrayofstrings',
        'examples': 'ExamplesList',
        'id': 'str',
        'regions': 'Arrayofstrings',
        'registers': 'Arrayofstrings',
        'subsenses': 'list[ThesaurusSense]',
        'synonyms': 'SynonymsAntonyms'
    }

    attribute_map = {
        'antonyms': 'antonyms',
        'domains': 'domains',
        'examples': 'examples',
        'id': 'id',
        'regions': 'regions',
        'registers': 'registers',
        'subsenses': 'subsenses',
        'synonyms': 'synonyms'
    }

    def __init__(self, antonyms=None, domains=None, examples=None, id=None, regions=None, registers=None, subsenses=None, synonyms=None):  # noqa: E501
        """ThesaurusSense - a model defined in Swagger"""  # noqa: E501

        self._antonyms = None
        self._domains = None
        self._examples = None
        self._id = None
        self._regions = None
        self._registers = None
        self._subsenses = None
        self._synonyms = None
        self.discriminator = None

        if antonyms is not None:
            self.antonyms = antonyms
        if domains is not None:
            self.domains = domains
        if examples is not None:
            self.examples = examples
        if id is not None:
            self.id = id
        if regions is not None:
            self.regions = regions
        if registers is not None:
            self.registers = registers
        if subsenses is not None:
            self.subsenses = subsenses
        if synonyms is not None:
            self.synonyms = synonyms

    @property
    def antonyms(self):
        """Gets the antonyms of this ThesaurusSense.  # noqa: E501

        antonym of word  # noqa: E501

        :return: The antonyms of this ThesaurusSense.  # noqa: E501
        :rtype: SynonymsAntonyms
        """
        return self._antonyms

    @antonyms.setter
    def antonyms(self, antonyms):
        """Sets the antonyms of this ThesaurusSense.

        antonym of word  # noqa: E501

        :param antonyms: The antonyms of this ThesaurusSense.  # noqa: E501
        :type: SynonymsAntonyms
        """

        self._antonyms = antonyms

    @property
    def domains(self):
        """Gets the domains of this ThesaurusSense.  # noqa: E501

        A subject, discipline, or branch of knowledge particular to the Sense  # noqa: E501

        :return: The domains of this ThesaurusSense.  # noqa: E501
        :rtype: Arrayofstrings
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this ThesaurusSense.

        A subject, discipline, or branch of knowledge particular to the Sense  # noqa: E501

        :param domains: The domains of this ThesaurusSense.  # noqa: E501
        :type: Arrayofstrings
        """

        self._domains = domains

    @property
    def examples(self):
        """Gets the examples of this ThesaurusSense.  # noqa: E501


        :return: The examples of this ThesaurusSense.  # noqa: E501
        :rtype: ExamplesList
        """
        return self._examples

    @examples.setter
    def examples(self, examples):
        """Sets the examples of this ThesaurusSense.


        :param examples: The examples of this ThesaurusSense.  # noqa: E501
        :type: ExamplesList
        """

        self._examples = examples

    @property
    def id(self):
        """Gets the id of this ThesaurusSense.  # noqa: E501

        The id of the sense that is required for the delete procedure  # noqa: E501

        :return: The id of this ThesaurusSense.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ThesaurusSense.

        The id of the sense that is required for the delete procedure  # noqa: E501

        :param id: The id of this ThesaurusSense.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def regions(self):
        """Gets the regions of this ThesaurusSense.  # noqa: E501

        A particular area in which the Sense occurs, e.g. 'Great Britain'  # noqa: E501

        :return: The regions of this ThesaurusSense.  # noqa: E501
        :rtype: Arrayofstrings
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this ThesaurusSense.

        A particular area in which the Sense occurs, e.g. 'Great Britain'  # noqa: E501

        :param regions: The regions of this ThesaurusSense.  # noqa: E501
        :type: Arrayofstrings
        """

        self._regions = regions

    @property
    def registers(self):
        """Gets the registers of this ThesaurusSense.  # noqa: E501

        A level of language usage, typically with respect to formality. e.g. 'offensive', 'informal'  # noqa: E501

        :return: The registers of this ThesaurusSense.  # noqa: E501
        :rtype: Arrayofstrings
        """
        return self._registers

    @registers.setter
    def registers(self, registers):
        """Sets the registers of this ThesaurusSense.

        A level of language usage, typically with respect to formality. e.g. 'offensive', 'informal'  # noqa: E501

        :param registers: The registers of this ThesaurusSense.  # noqa: E501
        :type: Arrayofstrings
        """

        self._registers = registers

    @property
    def subsenses(self):
        """Gets the subsenses of this ThesaurusSense.  # noqa: E501

        subsenses of word  # noqa: E501

        :return: The subsenses of this ThesaurusSense.  # noqa: E501
        :rtype: list[ThesaurusSense]
        """
        return self._subsenses

    @subsenses.setter
    def subsenses(self, subsenses):
        """Sets the subsenses of this ThesaurusSense.

        subsenses of word  # noqa: E501

        :param subsenses: The subsenses of this ThesaurusSense.  # noqa: E501
        :type: list[ThesaurusSense]
        """

        self._subsenses = subsenses

    @property
    def synonyms(self):
        """Gets the synonyms of this ThesaurusSense.  # noqa: E501

        synonym of word  # noqa: E501

        :return: The synonyms of this ThesaurusSense.  # noqa: E501
        :rtype: SynonymsAntonyms
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms):
        """Sets the synonyms of this ThesaurusSense.

        synonym of word  # noqa: E501

        :param synonyms: The synonyms of this ThesaurusSense.  # noqa: E501
        :type: SynonymsAntonyms
        """

        self._synonyms = synonyms

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThesaurusSense):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
