# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ThesaurusLink(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entry_id': 'str',
        'sense_id': 'str'
    }

    attribute_map = {
        'entry_id': 'entry_id',
        'sense_id': 'sense_id'
    }

    def __init__(self, entry_id=None, sense_id=None):  # noqa: E501
        """ThesaurusLink - a model defined in Swagger"""  # noqa: E501

        self._entry_id = None
        self._sense_id = None
        self.discriminator = None

        self.entry_id = entry_id
        self.sense_id = sense_id

    @property
    def entry_id(self):
        """Gets the entry_id of this ThesaurusLink.  # noqa: E501

        identifier of a word  # noqa: E501

        :return: The entry_id of this ThesaurusLink.  # noqa: E501
        :rtype: str
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this ThesaurusLink.

        identifier of a word  # noqa: E501

        :param entry_id: The entry_id of this ThesaurusLink.  # noqa: E501
        :type: str
        """
        if entry_id is None:
            raise ValueError("Invalid value for `entry_id`, must not be `None`")  # noqa: E501

        self._entry_id = entry_id

    @property
    def sense_id(self):
        """Gets the sense_id of this ThesaurusLink.  # noqa: E501

        identifier of a sense  # noqa: E501

        :return: The sense_id of this ThesaurusLink.  # noqa: E501
        :rtype: str
        """
        return self._sense_id

    @sense_id.setter
    def sense_id(self, sense_id):
        """Sets the sense_id of this ThesaurusLink.

        identifier of a sense  # noqa: E501

        :param sense_id: The sense_id of this ThesaurusLink.  # noqa: E501
        :type: str
        """
        if sense_id is None:
            raise ValueError("Invalid value for `sense_id`, must not be `None`")  # noqa: E501

        self._sense_id = sense_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThesaurusLink):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
