# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from oxford_dictionaries_api.models.arrayofstrings import Arrayofstrings  # noqa: F401,E501
from oxford_dictionaries_api.models.categorized_text_list import CategorizedTextList  # noqa: F401,E501
from oxford_dictionaries_api.models.translations_list import TranslationsList  # noqa: F401,E501


class ExamplesListInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'definitions': 'Arrayofstrings',
        'domains': 'Arrayofstrings',
        'notes': 'CategorizedTextList',
        'regions': 'Arrayofstrings',
        'registers': 'Arrayofstrings',
        'sense_ids': 'Arrayofstrings',
        'text': 'str',
        'translations': 'TranslationsList'
    }

    attribute_map = {
        'definitions': 'definitions',
        'domains': 'domains',
        'notes': 'notes',
        'regions': 'regions',
        'registers': 'registers',
        'sense_ids': 'senseIds',
        'text': 'text',
        'translations': 'translations'
    }

    def __init__(self, definitions=None, domains=None, notes=None, regions=None, registers=None, sense_ids=None, text=None, translations=None):  # noqa: E501
        """ExamplesListInner - a model defined in Swagger"""  # noqa: E501

        self._definitions = None
        self._domains = None
        self._notes = None
        self._regions = None
        self._registers = None
        self._sense_ids = None
        self._text = None
        self._translations = None
        self.discriminator = None

        if definitions is not None:
            self.definitions = definitions
        if domains is not None:
            self.domains = domains
        if notes is not None:
            self.notes = notes
        if regions is not None:
            self.regions = regions
        if registers is not None:
            self.registers = registers
        if sense_ids is not None:
            self.sense_ids = sense_ids
        self.text = text
        if translations is not None:
            self.translations = translations

    @property
    def definitions(self):
        """Gets the definitions of this ExamplesListInner.  # noqa: E501

        A list of statements of the exact meaning of a word  # noqa: E501

        :return: The definitions of this ExamplesListInner.  # noqa: E501
        :rtype: Arrayofstrings
        """
        return self._definitions

    @definitions.setter
    def definitions(self, definitions):
        """Sets the definitions of this ExamplesListInner.

        A list of statements of the exact meaning of a word  # noqa: E501

        :param definitions: The definitions of this ExamplesListInner.  # noqa: E501
        :type: Arrayofstrings
        """

        self._definitions = definitions

    @property
    def domains(self):
        """Gets the domains of this ExamplesListInner.  # noqa: E501

        A subject, discipline, or branch of knowledge particular to the Sense  # noqa: E501

        :return: The domains of this ExamplesListInner.  # noqa: E501
        :rtype: Arrayofstrings
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this ExamplesListInner.

        A subject, discipline, or branch of knowledge particular to the Sense  # noqa: E501

        :param domains: The domains of this ExamplesListInner.  # noqa: E501
        :type: Arrayofstrings
        """

        self._domains = domains

    @property
    def notes(self):
        """Gets the notes of this ExamplesListInner.  # noqa: E501


        :return: The notes of this ExamplesListInner.  # noqa: E501
        :rtype: CategorizedTextList
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ExamplesListInner.


        :param notes: The notes of this ExamplesListInner.  # noqa: E501
        :type: CategorizedTextList
        """

        self._notes = notes

    @property
    def regions(self):
        """Gets the regions of this ExamplesListInner.  # noqa: E501

        A particular area in which the pronunciation occurs, e.g. 'Great Britain'  # noqa: E501

        :return: The regions of this ExamplesListInner.  # noqa: E501
        :rtype: Arrayofstrings
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this ExamplesListInner.

        A particular area in which the pronunciation occurs, e.g. 'Great Britain'  # noqa: E501

        :param regions: The regions of this ExamplesListInner.  # noqa: E501
        :type: Arrayofstrings
        """

        self._regions = regions

    @property
    def registers(self):
        """Gets the registers of this ExamplesListInner.  # noqa: E501

        A level of language usage, typically with respect to formality. e.g. 'offensive', 'informal'  # noqa: E501

        :return: The registers of this ExamplesListInner.  # noqa: E501
        :rtype: Arrayofstrings
        """
        return self._registers

    @registers.setter
    def registers(self, registers):
        """Sets the registers of this ExamplesListInner.

        A level of language usage, typically with respect to formality. e.g. 'offensive', 'informal'  # noqa: E501

        :param registers: The registers of this ExamplesListInner.  # noqa: E501
        :type: Arrayofstrings
        """

        self._registers = registers

    @property
    def sense_ids(self):
        """Gets the sense_ids of this ExamplesListInner.  # noqa: E501

        The list of sense identifiers related to the example. Provided in the sentences endpoint only.  # noqa: E501

        :return: The sense_ids of this ExamplesListInner.  # noqa: E501
        :rtype: Arrayofstrings
        """
        return self._sense_ids

    @sense_ids.setter
    def sense_ids(self, sense_ids):
        """Sets the sense_ids of this ExamplesListInner.

        The list of sense identifiers related to the example. Provided in the sentences endpoint only.  # noqa: E501

        :param sense_ids: The sense_ids of this ExamplesListInner.  # noqa: E501
        :type: Arrayofstrings
        """

        self._sense_ids = sense_ids

    @property
    def text(self):
        """Gets the text of this ExamplesListInner.  # noqa: E501


        :return: The text of this ExamplesListInner.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ExamplesListInner.


        :param text: The text of this ExamplesListInner.  # noqa: E501
        :type: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def translations(self):
        """Gets the translations of this ExamplesListInner.  # noqa: E501


        :return: The translations of this ExamplesListInner.  # noqa: E501
        :rtype: TranslationsList
        """
        return self._translations

    @translations.setter
    def translations(self, translations):
        """Sets the translations of this ExamplesListInner.


        :param translations: The translations of this ExamplesListInner.  # noqa: E501
        :type: TranslationsList
        """

        self._translations = translations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExamplesListInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
