# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from oxford_dictionaries_api.models.array_of_related_entries import ArrayOfRelatedEntries  # noqa: F401,E501
from oxford_dictionaries_api.models.categorized_text_list import CategorizedTextList  # noqa: F401,E501
from oxford_dictionaries_api.models.entry import Entry  # noqa: F401,E501
from oxford_dictionaries_api.models.grammatical_features_list import GrammaticalFeaturesList  # noqa: F401,E501
from oxford_dictionaries_api.models.pronunciations_list import PronunciationsList  # noqa: F401,E501
from oxford_dictionaries_api.models.variant_forms_list import VariantFormsList  # noqa: F401,E501


class LexicalEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'derivative_of': 'ArrayOfRelatedEntries',
        'derivatives': 'ArrayOfRelatedEntries',
        'entries': 'list[Entry]',
        'grammatical_features': 'GrammaticalFeaturesList',
        'language': 'str',
        'lexical_category': 'str',
        'notes': 'CategorizedTextList',
        'pronunciations': 'PronunciationsList',
        'text': 'str',
        'variant_forms': 'VariantFormsList'
    }

    attribute_map = {
        'derivative_of': 'derivativeOf',
        'derivatives': 'derivatives',
        'entries': 'entries',
        'grammatical_features': 'grammaticalFeatures',
        'language': 'language',
        'lexical_category': 'lexicalCategory',
        'notes': 'notes',
        'pronunciations': 'pronunciations',
        'text': 'text',
        'variant_forms': 'variantForms'
    }

    def __init__(self, derivative_of=None, derivatives=None, entries=None, grammatical_features=None, language=None, lexical_category=None, notes=None, pronunciations=None, text=None, variant_forms=None):  # noqa: E501
        """LexicalEntry - a model defined in Swagger"""  # noqa: E501

        self._derivative_of = None
        self._derivatives = None
        self._entries = None
        self._grammatical_features = None
        self._language = None
        self._lexical_category = None
        self._notes = None
        self._pronunciations = None
        self._text = None
        self._variant_forms = None
        self.discriminator = None

        if derivative_of is not None:
            self.derivative_of = derivative_of
        if derivatives is not None:
            self.derivatives = derivatives
        if entries is not None:
            self.entries = entries
        if grammatical_features is not None:
            self.grammatical_features = grammatical_features
        self.language = language
        self.lexical_category = lexical_category
        if notes is not None:
            self.notes = notes
        if pronunciations is not None:
            self.pronunciations = pronunciations
        self.text = text
        if variant_forms is not None:
            self.variant_forms = variant_forms

    @property
    def derivative_of(self):
        """Gets the derivative_of of this LexicalEntry.  # noqa: E501

        Other words from which this one derives  # noqa: E501

        :return: The derivative_of of this LexicalEntry.  # noqa: E501
        :rtype: ArrayOfRelatedEntries
        """
        return self._derivative_of

    @derivative_of.setter
    def derivative_of(self, derivative_of):
        """Sets the derivative_of of this LexicalEntry.

        Other words from which this one derives  # noqa: E501

        :param derivative_of: The derivative_of of this LexicalEntry.  # noqa: E501
        :type: ArrayOfRelatedEntries
        """

        self._derivative_of = derivative_of

    @property
    def derivatives(self):
        """Gets the derivatives of this LexicalEntry.  # noqa: E501

        Other words from which their Sense derives  # noqa: E501

        :return: The derivatives of this LexicalEntry.  # noqa: E501
        :rtype: ArrayOfRelatedEntries
        """
        return self._derivatives

    @derivatives.setter
    def derivatives(self, derivatives):
        """Sets the derivatives of this LexicalEntry.

        Other words from which their Sense derives  # noqa: E501

        :param derivatives: The derivatives of this LexicalEntry.  # noqa: E501
        :type: ArrayOfRelatedEntries
        """

        self._derivatives = derivatives

    @property
    def entries(self):
        """Gets the entries of this LexicalEntry.  # noqa: E501


        :return: The entries of this LexicalEntry.  # noqa: E501
        :rtype: list[Entry]
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """Sets the entries of this LexicalEntry.


        :param entries: The entries of this LexicalEntry.  # noqa: E501
        :type: list[Entry]
        """

        self._entries = entries

    @property
    def grammatical_features(self):
        """Gets the grammatical_features of this LexicalEntry.  # noqa: E501


        :return: The grammatical_features of this LexicalEntry.  # noqa: E501
        :rtype: GrammaticalFeaturesList
        """
        return self._grammatical_features

    @grammatical_features.setter
    def grammatical_features(self, grammatical_features):
        """Sets the grammatical_features of this LexicalEntry.


        :param grammatical_features: The grammatical_features of this LexicalEntry.  # noqa: E501
        :type: GrammaticalFeaturesList
        """

        self._grammatical_features = grammatical_features

    @property
    def language(self):
        """Gets the language of this LexicalEntry.  # noqa: E501

        IANA language code  # noqa: E501

        :return: The language of this LexicalEntry.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this LexicalEntry.

        IANA language code  # noqa: E501

        :param language: The language of this LexicalEntry.  # noqa: E501
        :type: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")  # noqa: E501

        self._language = language

    @property
    def lexical_category(self):
        """Gets the lexical_category of this LexicalEntry.  # noqa: E501

        A linguistic category of words (or more precisely lexical items), generally defined by the syntactic or morphological behaviour of the lexical item in question, such as noun or verb  # noqa: E501

        :return: The lexical_category of this LexicalEntry.  # noqa: E501
        :rtype: str
        """
        return self._lexical_category

    @lexical_category.setter
    def lexical_category(self, lexical_category):
        """Sets the lexical_category of this LexicalEntry.

        A linguistic category of words (or more precisely lexical items), generally defined by the syntactic or morphological behaviour of the lexical item in question, such as noun or verb  # noqa: E501

        :param lexical_category: The lexical_category of this LexicalEntry.  # noqa: E501
        :type: str
        """
        if lexical_category is None:
            raise ValueError("Invalid value for `lexical_category`, must not be `None`")  # noqa: E501

        self._lexical_category = lexical_category

    @property
    def notes(self):
        """Gets the notes of this LexicalEntry.  # noqa: E501


        :return: The notes of this LexicalEntry.  # noqa: E501
        :rtype: CategorizedTextList
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this LexicalEntry.


        :param notes: The notes of this LexicalEntry.  # noqa: E501
        :type: CategorizedTextList
        """

        self._notes = notes

    @property
    def pronunciations(self):
        """Gets the pronunciations of this LexicalEntry.  # noqa: E501


        :return: The pronunciations of this LexicalEntry.  # noqa: E501
        :rtype: PronunciationsList
        """
        return self._pronunciations

    @pronunciations.setter
    def pronunciations(self, pronunciations):
        """Sets the pronunciations of this LexicalEntry.


        :param pronunciations: The pronunciations of this LexicalEntry.  # noqa: E501
        :type: PronunciationsList
        """

        self._pronunciations = pronunciations

    @property
    def text(self):
        """Gets the text of this LexicalEntry.  # noqa: E501

        A given written or spoken realisation of a an entry.  # noqa: E501

        :return: The text of this LexicalEntry.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this LexicalEntry.

        A given written or spoken realisation of a an entry.  # noqa: E501

        :param text: The text of this LexicalEntry.  # noqa: E501
        :type: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def variant_forms(self):
        """Gets the variant_forms of this LexicalEntry.  # noqa: E501

        Various words that are used interchangeably depending on the context, e.g 'a' and 'an'  # noqa: E501

        :return: The variant_forms of this LexicalEntry.  # noqa: E501
        :rtype: VariantFormsList
        """
        return self._variant_forms

    @variant_forms.setter
    def variant_forms(self, variant_forms):
        """Sets the variant_forms of this LexicalEntry.

        Various words that are used interchangeably depending on the context, e.g 'a' and 'an'  # noqa: E501

        :param variant_forms: The variant_forms of this LexicalEntry.  # noqa: E501
        :type: VariantFormsList
        """

        self._variant_forms = variant_forms

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LexicalEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
