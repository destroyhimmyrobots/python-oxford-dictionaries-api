# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from oxford_dictionaries_api.models.arrayofstrings import Arrayofstrings  # noqa: F401,E501
from oxford_dictionaries_api.models.categorized_text_list import CategorizedTextList  # noqa: F401,E501
from oxford_dictionaries_api.models.grammatical_features_list import GrammaticalFeaturesList  # noqa: F401,E501
from oxford_dictionaries_api.models.pronunciations_list import PronunciationsList  # noqa: F401,E501
from oxford_dictionaries_api.models.sense import Sense  # noqa: F401,E501
from oxford_dictionaries_api.models.variant_forms_list import VariantFormsList  # noqa: F401,E501


class Entry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'etymologies': 'Arrayofstrings',
        'grammatical_features': 'GrammaticalFeaturesList',
        'homograph_number': 'str',
        'notes': 'CategorizedTextList',
        'pronunciations': 'PronunciationsList',
        'senses': 'list[Sense]',
        'variant_forms': 'VariantFormsList'
    }

    attribute_map = {
        'etymologies': 'etymologies',
        'grammatical_features': 'grammaticalFeatures',
        'homograph_number': 'homographNumber',
        'notes': 'notes',
        'pronunciations': 'pronunciations',
        'senses': 'senses',
        'variant_forms': 'variantForms'
    }

    def __init__(self, etymologies=None, grammatical_features=None, homograph_number=None, notes=None, pronunciations=None, senses=None, variant_forms=None):  # noqa: E501
        """Entry - a model defined in Swagger"""  # noqa: E501

        self._etymologies = None
        self._grammatical_features = None
        self._homograph_number = None
        self._notes = None
        self._pronunciations = None
        self._senses = None
        self._variant_forms = None
        self.discriminator = None

        if etymologies is not None:
            self.etymologies = etymologies
        if grammatical_features is not None:
            self.grammatical_features = grammatical_features
        if homograph_number is not None:
            self.homograph_number = homograph_number
        if notes is not None:
            self.notes = notes
        if pronunciations is not None:
            self.pronunciations = pronunciations
        if senses is not None:
            self.senses = senses
        if variant_forms is not None:
            self.variant_forms = variant_forms

    @property
    def etymologies(self):
        """Gets the etymologies of this Entry.  # noqa: E501

        The origin of the word and the way in which its meaning has changed throughout history  # noqa: E501

        :return: The etymologies of this Entry.  # noqa: E501
        :rtype: Arrayofstrings
        """
        return self._etymologies

    @etymologies.setter
    def etymologies(self, etymologies):
        """Sets the etymologies of this Entry.

        The origin of the word and the way in which its meaning has changed throughout history  # noqa: E501

        :param etymologies: The etymologies of this Entry.  # noqa: E501
        :type: Arrayofstrings
        """

        self._etymologies = etymologies

    @property
    def grammatical_features(self):
        """Gets the grammatical_features of this Entry.  # noqa: E501


        :return: The grammatical_features of this Entry.  # noqa: E501
        :rtype: GrammaticalFeaturesList
        """
        return self._grammatical_features

    @grammatical_features.setter
    def grammatical_features(self, grammatical_features):
        """Sets the grammatical_features of this Entry.


        :param grammatical_features: The grammatical_features of this Entry.  # noqa: E501
        :type: GrammaticalFeaturesList
        """

        self._grammatical_features = grammatical_features

    @property
    def homograph_number(self):
        """Gets the homograph_number of this Entry.  # noqa: E501

        Identifies the homograph grouping. The last two digits identify different entries of the same homograph. The first one/two digits identify the homograph number.  # noqa: E501

        :return: The homograph_number of this Entry.  # noqa: E501
        :rtype: str
        """
        return self._homograph_number

    @homograph_number.setter
    def homograph_number(self, homograph_number):
        """Sets the homograph_number of this Entry.

        Identifies the homograph grouping. The last two digits identify different entries of the same homograph. The first one/two digits identify the homograph number.  # noqa: E501

        :param homograph_number: The homograph_number of this Entry.  # noqa: E501
        :type: str
        """

        self._homograph_number = homograph_number

    @property
    def notes(self):
        """Gets the notes of this Entry.  # noqa: E501


        :return: The notes of this Entry.  # noqa: E501
        :rtype: CategorizedTextList
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Entry.


        :param notes: The notes of this Entry.  # noqa: E501
        :type: CategorizedTextList
        """

        self._notes = notes

    @property
    def pronunciations(self):
        """Gets the pronunciations of this Entry.  # noqa: E501


        :return: The pronunciations of this Entry.  # noqa: E501
        :rtype: PronunciationsList
        """
        return self._pronunciations

    @pronunciations.setter
    def pronunciations(self, pronunciations):
        """Sets the pronunciations of this Entry.


        :param pronunciations: The pronunciations of this Entry.  # noqa: E501
        :type: PronunciationsList
        """

        self._pronunciations = pronunciations

    @property
    def senses(self):
        """Gets the senses of this Entry.  # noqa: E501

        Complete list of senses  # noqa: E501

        :return: The senses of this Entry.  # noqa: E501
        :rtype: list[Sense]
        """
        return self._senses

    @senses.setter
    def senses(self, senses):
        """Sets the senses of this Entry.

        Complete list of senses  # noqa: E501

        :param senses: The senses of this Entry.  # noqa: E501
        :type: list[Sense]
        """

        self._senses = senses

    @property
    def variant_forms(self):
        """Gets the variant_forms of this Entry.  # noqa: E501

        Various words that are used interchangeably depending on the context, e.g 'a' and 'an'  # noqa: E501

        :return: The variant_forms of this Entry.  # noqa: E501
        :rtype: VariantFormsList
        """
        return self._variant_forms

    @variant_forms.setter
    def variant_forms(self, variant_forms):
        """Sets the variant_forms of this Entry.

        Various words that are used interchangeably depending on the context, e.g 'a' and 'an'  # noqa: E501

        :param variant_forms: The variant_forms of this Entry.  # noqa: E501
        :type: VariantFormsList
        """

        self._variant_forms = variant_forms

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Entry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
