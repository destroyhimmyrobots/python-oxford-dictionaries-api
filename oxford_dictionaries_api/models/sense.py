# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from oxford_dictionaries_api.models.arrayofstrings import Arrayofstrings  # noqa: F401,E501
from oxford_dictionaries_api.models.categorized_text_list import CategorizedTextList  # noqa: F401,E501
from oxford_dictionaries_api.models.cross_references_list import CrossReferencesList  # noqa: F401,E501
from oxford_dictionaries_api.models.examples_list import ExamplesList  # noqa: F401,E501
from oxford_dictionaries_api.models.pronunciations_list import PronunciationsList  # noqa: F401,E501
from oxford_dictionaries_api.models.sense import Sense  # noqa: F401,E501
from oxford_dictionaries_api.models.thesaurus_link import ThesaurusLink  # noqa: F401,E501
from oxford_dictionaries_api.models.translations_list import TranslationsList  # noqa: F401,E501
from oxford_dictionaries_api.models.variant_forms_list import VariantFormsList  # noqa: F401,E501


class Sense(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cross_reference_markers': 'Arrayofstrings',
        'cross_references': 'CrossReferencesList',
        'definitions': 'Arrayofstrings',
        'domains': 'Arrayofstrings',
        'examples': 'ExamplesList',
        'id': 'str',
        'notes': 'CategorizedTextList',
        'pronunciations': 'PronunciationsList',
        'regions': 'Arrayofstrings',
        'registers': 'Arrayofstrings',
        'short_definitions': 'Arrayofstrings',
        'subsenses': 'list[Sense]',
        'thesaurus_links': 'list[ThesaurusLink]',
        'translations': 'TranslationsList',
        'variant_forms': 'VariantFormsList'
    }

    attribute_map = {
        'cross_reference_markers': 'crossReferenceMarkers',
        'cross_references': 'crossReferences',
        'definitions': 'definitions',
        'domains': 'domains',
        'examples': 'examples',
        'id': 'id',
        'notes': 'notes',
        'pronunciations': 'pronunciations',
        'regions': 'regions',
        'registers': 'registers',
        'short_definitions': 'short_definitions',
        'subsenses': 'subsenses',
        'thesaurus_links': 'thesaurusLinks',
        'translations': 'translations',
        'variant_forms': 'variantForms'
    }

    def __init__(self, cross_reference_markers=None, cross_references=None, definitions=None, domains=None, examples=None, id=None, notes=None, pronunciations=None, regions=None, registers=None, short_definitions=None, subsenses=None, thesaurus_links=None, translations=None, variant_forms=None):  # noqa: E501
        """Sense - a model defined in Swagger"""  # noqa: E501

        self._cross_reference_markers = None
        self._cross_references = None
        self._definitions = None
        self._domains = None
        self._examples = None
        self._id = None
        self._notes = None
        self._pronunciations = None
        self._regions = None
        self._registers = None
        self._short_definitions = None
        self._subsenses = None
        self._thesaurus_links = None
        self._translations = None
        self._variant_forms = None
        self.discriminator = None

        if cross_reference_markers is not None:
            self.cross_reference_markers = cross_reference_markers
        if cross_references is not None:
            self.cross_references = cross_references
        if definitions is not None:
            self.definitions = definitions
        if domains is not None:
            self.domains = domains
        if examples is not None:
            self.examples = examples
        if id is not None:
            self.id = id
        if notes is not None:
            self.notes = notes
        if pronunciations is not None:
            self.pronunciations = pronunciations
        if regions is not None:
            self.regions = regions
        if registers is not None:
            self.registers = registers
        if short_definitions is not None:
            self.short_definitions = short_definitions
        if subsenses is not None:
            self.subsenses = subsenses
        if thesaurus_links is not None:
            self.thesaurus_links = thesaurus_links
        if translations is not None:
            self.translations = translations
        if variant_forms is not None:
            self.variant_forms = variant_forms

    @property
    def cross_reference_markers(self):
        """Gets the cross_reference_markers of this Sense.  # noqa: E501

        A grouping of crossreference notes.  # noqa: E501

        :return: The cross_reference_markers of this Sense.  # noqa: E501
        :rtype: Arrayofstrings
        """
        return self._cross_reference_markers

    @cross_reference_markers.setter
    def cross_reference_markers(self, cross_reference_markers):
        """Sets the cross_reference_markers of this Sense.

        A grouping of crossreference notes.  # noqa: E501

        :param cross_reference_markers: The cross_reference_markers of this Sense.  # noqa: E501
        :type: Arrayofstrings
        """

        self._cross_reference_markers = cross_reference_markers

    @property
    def cross_references(self):
        """Gets the cross_references of this Sense.  # noqa: E501


        :return: The cross_references of this Sense.  # noqa: E501
        :rtype: CrossReferencesList
        """
        return self._cross_references

    @cross_references.setter
    def cross_references(self, cross_references):
        """Sets the cross_references of this Sense.


        :param cross_references: The cross_references of this Sense.  # noqa: E501
        :type: CrossReferencesList
        """

        self._cross_references = cross_references

    @property
    def definitions(self):
        """Gets the definitions of this Sense.  # noqa: E501

        A list of statements of the exact meaning of a word  # noqa: E501

        :return: The definitions of this Sense.  # noqa: E501
        :rtype: Arrayofstrings
        """
        return self._definitions

    @definitions.setter
    def definitions(self, definitions):
        """Sets the definitions of this Sense.

        A list of statements of the exact meaning of a word  # noqa: E501

        :param definitions: The definitions of this Sense.  # noqa: E501
        :type: Arrayofstrings
        """

        self._definitions = definitions

    @property
    def domains(self):
        """Gets the domains of this Sense.  # noqa: E501

        A subject, discipline, or branch of knowledge particular to the Sense  # noqa: E501

        :return: The domains of this Sense.  # noqa: E501
        :rtype: Arrayofstrings
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this Sense.

        A subject, discipline, or branch of knowledge particular to the Sense  # noqa: E501

        :param domains: The domains of this Sense.  # noqa: E501
        :type: Arrayofstrings
        """

        self._domains = domains

    @property
    def examples(self):
        """Gets the examples of this Sense.  # noqa: E501


        :return: The examples of this Sense.  # noqa: E501
        :rtype: ExamplesList
        """
        return self._examples

    @examples.setter
    def examples(self, examples):
        """Sets the examples of this Sense.


        :param examples: The examples of this Sense.  # noqa: E501
        :type: ExamplesList
        """

        self._examples = examples

    @property
    def id(self):
        """Gets the id of this Sense.  # noqa: E501

        The id of the sense that is required for the delete procedure  # noqa: E501

        :return: The id of this Sense.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Sense.

        The id of the sense that is required for the delete procedure  # noqa: E501

        :param id: The id of this Sense.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def notes(self):
        """Gets the notes of this Sense.  # noqa: E501


        :return: The notes of this Sense.  # noqa: E501
        :rtype: CategorizedTextList
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Sense.


        :param notes: The notes of this Sense.  # noqa: E501
        :type: CategorizedTextList
        """

        self._notes = notes

    @property
    def pronunciations(self):
        """Gets the pronunciations of this Sense.  # noqa: E501


        :return: The pronunciations of this Sense.  # noqa: E501
        :rtype: PronunciationsList
        """
        return self._pronunciations

    @pronunciations.setter
    def pronunciations(self, pronunciations):
        """Sets the pronunciations of this Sense.


        :param pronunciations: The pronunciations of this Sense.  # noqa: E501
        :type: PronunciationsList
        """

        self._pronunciations = pronunciations

    @property
    def regions(self):
        """Gets the regions of this Sense.  # noqa: E501

        A particular area in which the Sense occurs, e.g. 'Great Britain'  # noqa: E501

        :return: The regions of this Sense.  # noqa: E501
        :rtype: Arrayofstrings
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this Sense.

        A particular area in which the Sense occurs, e.g. 'Great Britain'  # noqa: E501

        :param regions: The regions of this Sense.  # noqa: E501
        :type: Arrayofstrings
        """

        self._regions = regions

    @property
    def registers(self):
        """Gets the registers of this Sense.  # noqa: E501

        A level of language usage, typically with respect to formality. e.g. 'offensive', 'informal'  # noqa: E501

        :return: The registers of this Sense.  # noqa: E501
        :rtype: Arrayofstrings
        """
        return self._registers

    @registers.setter
    def registers(self, registers):
        """Sets the registers of this Sense.

        A level of language usage, typically with respect to formality. e.g. 'offensive', 'informal'  # noqa: E501

        :param registers: The registers of this Sense.  # noqa: E501
        :type: Arrayofstrings
        """

        self._registers = registers

    @property
    def short_definitions(self):
        """Gets the short_definitions of this Sense.  # noqa: E501

        A list of short statements of the exact meaning of a word  # noqa: E501

        :return: The short_definitions of this Sense.  # noqa: E501
        :rtype: Arrayofstrings
        """
        return self._short_definitions

    @short_definitions.setter
    def short_definitions(self, short_definitions):
        """Sets the short_definitions of this Sense.

        A list of short statements of the exact meaning of a word  # noqa: E501

        :param short_definitions: The short_definitions of this Sense.  # noqa: E501
        :type: Arrayofstrings
        """

        self._short_definitions = short_definitions

    @property
    def subsenses(self):
        """Gets the subsenses of this Sense.  # noqa: E501

        Ordered list of subsenses of a sense  # noqa: E501

        :return: The subsenses of this Sense.  # noqa: E501
        :rtype: list[Sense]
        """
        return self._subsenses

    @subsenses.setter
    def subsenses(self, subsenses):
        """Sets the subsenses of this Sense.

        Ordered list of subsenses of a sense  # noqa: E501

        :param subsenses: The subsenses of this Sense.  # noqa: E501
        :type: list[Sense]
        """

        self._subsenses = subsenses

    @property
    def thesaurus_links(self):
        """Gets the thesaurus_links of this Sense.  # noqa: E501

        Ordered list of links to the Thesaurus Dictionary  # noqa: E501

        :return: The thesaurus_links of this Sense.  # noqa: E501
        :rtype: list[ThesaurusLink]
        """
        return self._thesaurus_links

    @thesaurus_links.setter
    def thesaurus_links(self, thesaurus_links):
        """Sets the thesaurus_links of this Sense.

        Ordered list of links to the Thesaurus Dictionary  # noqa: E501

        :param thesaurus_links: The thesaurus_links of this Sense.  # noqa: E501
        :type: list[ThesaurusLink]
        """

        self._thesaurus_links = thesaurus_links

    @property
    def translations(self):
        """Gets the translations of this Sense.  # noqa: E501


        :return: The translations of this Sense.  # noqa: E501
        :rtype: TranslationsList
        """
        return self._translations

    @translations.setter
    def translations(self, translations):
        """Sets the translations of this Sense.


        :param translations: The translations of this Sense.  # noqa: E501
        :type: TranslationsList
        """

        self._translations = translations

    @property
    def variant_forms(self):
        """Gets the variant_forms of this Sense.  # noqa: E501

        Various words that are used interchangeably depending on the context, e.g 'duck' and 'duck boat'  # noqa: E501

        :return: The variant_forms of this Sense.  # noqa: E501
        :rtype: VariantFormsList
        """
        return self._variant_forms

    @variant_forms.setter
    def variant_forms(self, variant_forms):
        """Sets the variant_forms of this Sense.

        Various words that are used interchangeably depending on the context, e.g 'duck' and 'duck boat'  # noqa: E501

        :param variant_forms: The variant_forms of this Sense.  # noqa: E501
        :type: VariantFormsList
        """

        self._variant_forms = variant_forms

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Sense):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
