# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from oxford_dictionaries_api.models.languages_source_language import LanguagesSourceLanguage  # noqa: F401,E501
from oxford_dictionaries_api.models.languages_target_language import LanguagesTargetLanguage  # noqa: F401,E501


class LanguagesResults(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'region': 'str',
        'source': 'str',
        'source_language': 'LanguagesSourceLanguage',
        'target_language': 'LanguagesTargetLanguage',
        'type': 'str'
    }

    attribute_map = {
        'region': 'region',
        'source': 'source',
        'source_language': 'sourceLanguage',
        'target_language': 'targetLanguage',
        'type': 'type'
    }

    def __init__(self, region=None, source=None, source_language=None, target_language=None, type=None):  # noqa: E501
        """LanguagesResults - a model defined in Swagger"""  # noqa: E501

        self._region = None
        self._source = None
        self._source_language = None
        self._target_language = None
        self._type = None
        self.discriminator = None

        if region is not None:
            self.region = region
        if source is not None:
            self.source = source
        if source_language is not None:
            self.source_language = source_language
        if target_language is not None:
            self.target_language = target_language
        if type is not None:
            self.type = type

    @property
    def region(self):
        """Gets the region of this LanguagesResults.  # noqa: E501

        Name of region.  # noqa: E501

        :return: The region of this LanguagesResults.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this LanguagesResults.

        Name of region.  # noqa: E501

        :param region: The region of this LanguagesResults.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def source(self):
        """Gets the source of this LanguagesResults.  # noqa: E501

        Name of source dictionary.  # noqa: E501

        :return: The source of this LanguagesResults.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this LanguagesResults.

        Name of source dictionary.  # noqa: E501

        :param source: The source of this LanguagesResults.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def source_language(self):
        """Gets the source_language of this LanguagesResults.  # noqa: E501


        :return: The source_language of this LanguagesResults.  # noqa: E501
        :rtype: LanguagesSourceLanguage
        """
        return self._source_language

    @source_language.setter
    def source_language(self, source_language):
        """Sets the source_language of this LanguagesResults.


        :param source_language: The source_language of this LanguagesResults.  # noqa: E501
        :type: LanguagesSourceLanguage
        """

        self._source_language = source_language

    @property
    def target_language(self):
        """Gets the target_language of this LanguagesResults.  # noqa: E501


        :return: The target_language of this LanguagesResults.  # noqa: E501
        :rtype: LanguagesTargetLanguage
        """
        return self._target_language

    @target_language.setter
    def target_language(self, target_language):
        """Sets the target_language of this LanguagesResults.


        :param target_language: The target_language of this LanguagesResults.  # noqa: E501
        :type: LanguagesTargetLanguage
        """

        self._target_language = target_language

    @property
    def type(self):
        """Gets the type of this LanguagesResults.  # noqa: E501

        whether monolingual or bilingual.  # noqa: E501

        :return: The type of this LanguagesResults.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LanguagesResults.

        whether monolingual or bilingual.  # noqa: E501

        :param type: The type of this LanguagesResults.  # noqa: E501
        :type: str
        """
        allowed_values = ["monolingual", "bilingual"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LanguagesResults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
