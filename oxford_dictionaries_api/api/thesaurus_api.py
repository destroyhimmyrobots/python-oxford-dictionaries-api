# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from oxford_dictionaries_api.api_client import ApiClient


class ThesaurusApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def entries_source_lang_word_id_antonyms_get(self, source_lang, word_id, app_id, app_key, **kwargs):  # noqa: E501
        """Retrieve words that mean the opposite  # noqa: E501

         Retrieve words that are opposite in meaning to the input word ([antonym](documentation/glossary?term=thesaurus)).    <div id=\"antonyms\"></div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.entries_source_lang_word_id_antonyms_get(source_lang, word_id, app_id, app_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str source_lang: IANA language code (required)
        :param str word_id: An Entry identifier. Case-sensitive. (required)
        :param str app_id: App ID Authentication Parameter (required)
        :param str app_key: App Key Authentication Parameter (required)
        :return: Thesaurus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.entries_source_lang_word_id_antonyms_get_with_http_info(source_lang, word_id, app_id, app_key, **kwargs)  # noqa: E501
        else:
            (data) = self.entries_source_lang_word_id_antonyms_get_with_http_info(source_lang, word_id, app_id, app_key, **kwargs)  # noqa: E501
            return data

    def entries_source_lang_word_id_antonyms_get_with_http_info(self, source_lang, word_id, app_id, app_key, **kwargs):  # noqa: E501
        """Retrieve words that mean the opposite  # noqa: E501

         Retrieve words that are opposite in meaning to the input word ([antonym](documentation/glossary?term=thesaurus)).    <div id=\"antonyms\"></div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.entries_source_lang_word_id_antonyms_get_with_http_info(source_lang, word_id, app_id, app_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str source_lang: IANA language code (required)
        :param str word_id: An Entry identifier. Case-sensitive. (required)
        :param str app_id: App ID Authentication Parameter (required)
        :param str app_key: App Key Authentication Parameter (required)
        :return: Thesaurus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source_lang', 'word_id', 'app_id', 'app_key']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method entries_source_lang_word_id_antonyms_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source_lang' is set
        if ('source_lang' not in params or
                params['source_lang'] is None):
            raise ValueError("Missing the required parameter `source_lang` when calling `entries_source_lang_word_id_antonyms_get`")  # noqa: E501
        # verify the required parameter 'word_id' is set
        if ('word_id' not in params or
                params['word_id'] is None):
            raise ValueError("Missing the required parameter `word_id` when calling `entries_source_lang_word_id_antonyms_get`")  # noqa: E501
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `entries_source_lang_word_id_antonyms_get`")  # noqa: E501
        # verify the required parameter 'app_key' is set
        if ('app_key' not in params or
                params['app_key'] is None):
            raise ValueError("Missing the required parameter `app_key` when calling `entries_source_lang_word_id_antonyms_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'source_lang' in params:
            path_params['source_lang'] = params['source_lang']  # noqa: E501
        if 'word_id' in params:
            path_params['word_id'] = params['word_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'app_id' in params:
            header_params['app_id'] = params['app_id']  # noqa: E501
        if 'app_key' in params:
            header_params['app_key'] = params['app_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/entries/{source_lang}/{word_id}/antonyms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Thesaurus',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def entries_source_lang_word_id_synonyms_get(self, source_lang, word_id, app_id, app_key, **kwargs):  # noqa: E501
        """Retrieve words that are similar  # noqa: E501

         Use this to retrieve words that are similar in meaning to the input word ([synonym](documentation/glossary?term=synonym)).    <div id=\"synonyms\"></div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.entries_source_lang_word_id_synonyms_get(source_lang, word_id, app_id, app_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str source_lang: IANA language code (required)
        :param str word_id: An Entry identifier. Case-sensitive. (required)
        :param str app_id: App ID Authentication Parameter (required)
        :param str app_key: App Key Authentication Parameter (required)
        :return: Thesaurus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.entries_source_lang_word_id_synonyms_get_with_http_info(source_lang, word_id, app_id, app_key, **kwargs)  # noqa: E501
        else:
            (data) = self.entries_source_lang_word_id_synonyms_get_with_http_info(source_lang, word_id, app_id, app_key, **kwargs)  # noqa: E501
            return data

    def entries_source_lang_word_id_synonyms_get_with_http_info(self, source_lang, word_id, app_id, app_key, **kwargs):  # noqa: E501
        """Retrieve words that are similar  # noqa: E501

         Use this to retrieve words that are similar in meaning to the input word ([synonym](documentation/glossary?term=synonym)).    <div id=\"synonyms\"></div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.entries_source_lang_word_id_synonyms_get_with_http_info(source_lang, word_id, app_id, app_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str source_lang: IANA language code (required)
        :param str word_id: An Entry identifier. Case-sensitive. (required)
        :param str app_id: App ID Authentication Parameter (required)
        :param str app_key: App Key Authentication Parameter (required)
        :return: Thesaurus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source_lang', 'word_id', 'app_id', 'app_key']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method entries_source_lang_word_id_synonyms_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source_lang' is set
        if ('source_lang' not in params or
                params['source_lang'] is None):
            raise ValueError("Missing the required parameter `source_lang` when calling `entries_source_lang_word_id_synonyms_get`")  # noqa: E501
        # verify the required parameter 'word_id' is set
        if ('word_id' not in params or
                params['word_id'] is None):
            raise ValueError("Missing the required parameter `word_id` when calling `entries_source_lang_word_id_synonyms_get`")  # noqa: E501
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `entries_source_lang_word_id_synonyms_get`")  # noqa: E501
        # verify the required parameter 'app_key' is set
        if ('app_key' not in params or
                params['app_key'] is None):
            raise ValueError("Missing the required parameter `app_key` when calling `entries_source_lang_word_id_synonyms_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'source_lang' in params:
            path_params['source_lang'] = params['source_lang']  # noqa: E501
        if 'word_id' in params:
            path_params['word_id'] = params['word_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'app_id' in params:
            header_params['app_id'] = params['app_id']  # noqa: E501
        if 'app_key' in params:
            header_params['app_key'] = params['app_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/entries/{source_lang}/{word_id}/synonyms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Thesaurus',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def entries_source_lang_word_id_synonymsantonyms_get(self, source_lang, word_id, app_id, app_key, **kwargs):  # noqa: E501
        """Retrieve synonyms and antonyms for a given word  # noqa: E501

         Retrieve available [synonyms](documentation/glossary?term=thesaurus) and [antonyms](documentation/glossary?term=thesaurus) for a given word and language.     <div id=\"synonyms_and_antonyms\"></div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.entries_source_lang_word_id_synonymsantonyms_get(source_lang, word_id, app_id, app_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str source_lang: IANA language code (required)
        :param str word_id: An Entry identifier. Case-sensitive. (required)
        :param str app_id: App ID Authentication Parameter (required)
        :param str app_key: App Key Authentication Parameter (required)
        :return: Thesaurus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.entries_source_lang_word_id_synonymsantonyms_get_with_http_info(source_lang, word_id, app_id, app_key, **kwargs)  # noqa: E501
        else:
            (data) = self.entries_source_lang_word_id_synonymsantonyms_get_with_http_info(source_lang, word_id, app_id, app_key, **kwargs)  # noqa: E501
            return data

    def entries_source_lang_word_id_synonymsantonyms_get_with_http_info(self, source_lang, word_id, app_id, app_key, **kwargs):  # noqa: E501
        """Retrieve synonyms and antonyms for a given word  # noqa: E501

         Retrieve available [synonyms](documentation/glossary?term=thesaurus) and [antonyms](documentation/glossary?term=thesaurus) for a given word and language.     <div id=\"synonyms_and_antonyms\"></div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.entries_source_lang_word_id_synonymsantonyms_get_with_http_info(source_lang, word_id, app_id, app_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str source_lang: IANA language code (required)
        :param str word_id: An Entry identifier. Case-sensitive. (required)
        :param str app_id: App ID Authentication Parameter (required)
        :param str app_key: App Key Authentication Parameter (required)
        :return: Thesaurus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source_lang', 'word_id', 'app_id', 'app_key']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method entries_source_lang_word_id_synonymsantonyms_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source_lang' is set
        if ('source_lang' not in params or
                params['source_lang'] is None):
            raise ValueError("Missing the required parameter `source_lang` when calling `entries_source_lang_word_id_synonymsantonyms_get`")  # noqa: E501
        # verify the required parameter 'word_id' is set
        if ('word_id' not in params or
                params['word_id'] is None):
            raise ValueError("Missing the required parameter `word_id` when calling `entries_source_lang_word_id_synonymsantonyms_get`")  # noqa: E501
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `entries_source_lang_word_id_synonymsantonyms_get`")  # noqa: E501
        # verify the required parameter 'app_key' is set
        if ('app_key' not in params or
                params['app_key'] is None):
            raise ValueError("Missing the required parameter `app_key` when calling `entries_source_lang_word_id_synonymsantonyms_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'source_lang' in params:
            path_params['source_lang'] = params['source_lang']  # noqa: E501
        if 'word_id' in params:
            path_params['word_id'] = params['word_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'app_id' in params:
            header_params['app_id'] = params['app_id']  # noqa: E501
        if 'app_key' in params:
            header_params['app_key'] = params['app_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/entries/{source_lang}/{word_id}/synonyms;antonyms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Thesaurus',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
