# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from oxford_dictionaries_api.api_client import ApiClient


class DictionaryEntriesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def entries_source_lang_word_id_filters_get(self, source_lang, word_id, filters, app_id, app_key, **kwargs):  # noqa: E501
        """Apply filters to response  # noqa: E501

         Use filters to limit the [entry](documentation/glossary?term=entry) information that is returned. For example, you may only require definitions and not everything else, or just [pronunciations](documentation/glossary?term=pronunciation). The full list of filters can be retrieved from the filters Utility endpoint. You can also specify values within the filter using '='. For example 'grammaticalFeatures=singular'. Filters can also be combined using a semicolon.    <div id=\"dictionary_entries_filters\"></div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.entries_source_lang_word_id_filters_get(source_lang, word_id, filters, app_id, app_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str source_lang: IANA language code (required)
        :param str word_id: An Entry identifier. Case-sensitive. (required)
        :param list[str] filters: Separate filtering conditions using a semicolon. Conditions take values grammaticalFeatures and/or lexicalCategory and are case-sensitive. To list multiple values in single condition divide them with comma. (required)
        :param str app_id: App ID Authentication Parameter (required)
        :param str app_key: App Key Authentication Parameter (required)
        :return: RetrieveEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.entries_source_lang_word_id_filters_get_with_http_info(source_lang, word_id, filters, app_id, app_key, **kwargs)  # noqa: E501
        else:
            (data) = self.entries_source_lang_word_id_filters_get_with_http_info(source_lang, word_id, filters, app_id, app_key, **kwargs)  # noqa: E501
            return data

    def entries_source_lang_word_id_filters_get_with_http_info(self, source_lang, word_id, filters, app_id, app_key, **kwargs):  # noqa: E501
        """Apply filters to response  # noqa: E501

         Use filters to limit the [entry](documentation/glossary?term=entry) information that is returned. For example, you may only require definitions and not everything else, or just [pronunciations](documentation/glossary?term=pronunciation). The full list of filters can be retrieved from the filters Utility endpoint. You can also specify values within the filter using '='. For example 'grammaticalFeatures=singular'. Filters can also be combined using a semicolon.    <div id=\"dictionary_entries_filters\"></div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.entries_source_lang_word_id_filters_get_with_http_info(source_lang, word_id, filters, app_id, app_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str source_lang: IANA language code (required)
        :param str word_id: An Entry identifier. Case-sensitive. (required)
        :param list[str] filters: Separate filtering conditions using a semicolon. Conditions take values grammaticalFeatures and/or lexicalCategory and are case-sensitive. To list multiple values in single condition divide them with comma. (required)
        :param str app_id: App ID Authentication Parameter (required)
        :param str app_key: App Key Authentication Parameter (required)
        :return: RetrieveEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source_lang', 'word_id', 'filters', 'app_id', 'app_key']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method entries_source_lang_word_id_filters_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source_lang' is set
        if ('source_lang' not in params or
                params['source_lang'] is None):
            raise ValueError("Missing the required parameter `source_lang` when calling `entries_source_lang_word_id_filters_get`")  # noqa: E501
        # verify the required parameter 'word_id' is set
        if ('word_id' not in params or
                params['word_id'] is None):
            raise ValueError("Missing the required parameter `word_id` when calling `entries_source_lang_word_id_filters_get`")  # noqa: E501
        # verify the required parameter 'filters' is set
        if ('filters' not in params or
                params['filters'] is None):
            raise ValueError("Missing the required parameter `filters` when calling `entries_source_lang_word_id_filters_get`")  # noqa: E501
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `entries_source_lang_word_id_filters_get`")  # noqa: E501
        # verify the required parameter 'app_key' is set
        if ('app_key' not in params or
                params['app_key'] is None):
            raise ValueError("Missing the required parameter `app_key` when calling `entries_source_lang_word_id_filters_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'source_lang' in params:
            path_params['source_lang'] = params['source_lang']  # noqa: E501
        if 'word_id' in params:
            path_params['word_id'] = params['word_id']  # noqa: E501
        if 'filters' in params:
            path_params['filters'] = params['filters']  # noqa: E501
            collection_formats['filters'] = 'csv'  # noqa: E501

        query_params = []

        header_params = {}
        if 'app_id' in params:
            header_params['app_id'] = params['app_id']  # noqa: E501
        if 'app_key' in params:
            header_params['app_key'] = params['app_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/entries/{source_lang}/{word_id}/{filters}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RetrieveEntry',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def entries_source_lang_word_id_get(self, source_lang, word_id, app_id, app_key, **kwargs):  # noqa: E501
        """Retrieve dictionary information for a given word  # noqa: E501

         Use this to retrieve definitions, [pronunciations](documentation/glossary?term=pronunciation), example sentences, [grammatical information](documentation/glossary?term=grammaticalfeatures) and [word origins](documentation/glossary?term=etymology). It only works for dictionary [headwords](documentation/glossary?term=headword), so you may need to use the [Lemmatron](documentation/glossary?term=lemma) first if your input is likely to be an [inflected](documentation/glossary?term=inflection) form (e.g., 'swimming'). This would return the linked [headword](documentation/glossary?term=headword) (e.g., 'swim') which you can then use in the Entries endpoint. Unless specified using a region filter, the default lookup will be the Oxford Dictionary of English (GB).    <div id=\"dictionary_entries\"></div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.entries_source_lang_word_id_get(source_lang, word_id, app_id, app_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str source_lang: IANA language code (required)
        :param str word_id: An Entry identifier. Case-sensitive. (required)
        :param str app_id: App ID Authentication Parameter (required)
        :param str app_key: App Key Authentication Parameter (required)
        :return: RetrieveEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.entries_source_lang_word_id_get_with_http_info(source_lang, word_id, app_id, app_key, **kwargs)  # noqa: E501
        else:
            (data) = self.entries_source_lang_word_id_get_with_http_info(source_lang, word_id, app_id, app_key, **kwargs)  # noqa: E501
            return data

    def entries_source_lang_word_id_get_with_http_info(self, source_lang, word_id, app_id, app_key, **kwargs):  # noqa: E501
        """Retrieve dictionary information for a given word  # noqa: E501

         Use this to retrieve definitions, [pronunciations](documentation/glossary?term=pronunciation), example sentences, [grammatical information](documentation/glossary?term=grammaticalfeatures) and [word origins](documentation/glossary?term=etymology). It only works for dictionary [headwords](documentation/glossary?term=headword), so you may need to use the [Lemmatron](documentation/glossary?term=lemma) first if your input is likely to be an [inflected](documentation/glossary?term=inflection) form (e.g., 'swimming'). This would return the linked [headword](documentation/glossary?term=headword) (e.g., 'swim') which you can then use in the Entries endpoint. Unless specified using a region filter, the default lookup will be the Oxford Dictionary of English (GB).    <div id=\"dictionary_entries\"></div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.entries_source_lang_word_id_get_with_http_info(source_lang, word_id, app_id, app_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str source_lang: IANA language code (required)
        :param str word_id: An Entry identifier. Case-sensitive. (required)
        :param str app_id: App ID Authentication Parameter (required)
        :param str app_key: App Key Authentication Parameter (required)
        :return: RetrieveEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source_lang', 'word_id', 'app_id', 'app_key']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method entries_source_lang_word_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source_lang' is set
        if ('source_lang' not in params or
                params['source_lang'] is None):
            raise ValueError("Missing the required parameter `source_lang` when calling `entries_source_lang_word_id_get`")  # noqa: E501
        # verify the required parameter 'word_id' is set
        if ('word_id' not in params or
                params['word_id'] is None):
            raise ValueError("Missing the required parameter `word_id` when calling `entries_source_lang_word_id_get`")  # noqa: E501
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `entries_source_lang_word_id_get`")  # noqa: E501
        # verify the required parameter 'app_key' is set
        if ('app_key' not in params or
                params['app_key'] is None):
            raise ValueError("Missing the required parameter `app_key` when calling `entries_source_lang_word_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'source_lang' in params:
            path_params['source_lang'] = params['source_lang']  # noqa: E501
        if 'word_id' in params:
            path_params['word_id'] = params['word_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'app_id' in params:
            header_params['app_id'] = params['app_id']  # noqa: E501
        if 'app_key' in params:
            header_params['app_key'] = params['app_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/entries/{source_lang}/{word_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RetrieveEntry',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def entries_source_lang_word_id_regionsregion_get(self, source_lang, word_id, region, app_id, app_key, **kwargs):  # noqa: E501
        """Specify GB or US dictionary for English entry search  # noqa: E501

         USe this filter to restrict the lookup to either our Oxford Dictionary of English (GB) or New Oxford American Dictionary (US).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.entries_source_lang_word_id_regionsregion_get(source_lang, word_id, region, app_id, app_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str source_lang: IANA language code (required)
        :param str word_id: An Entry identifier. Case-sensitive. (required)
        :param str region: Region filter parameter. gb = Oxford Dictionary of English. us = New Oxford American Dictionary. (required)
        :param str app_id: App ID Authentication Parameter (required)
        :param str app_key: App Key Authentication Parameter (required)
        :return: RetrieveEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.entries_source_lang_word_id_regionsregion_get_with_http_info(source_lang, word_id, region, app_id, app_key, **kwargs)  # noqa: E501
        else:
            (data) = self.entries_source_lang_word_id_regionsregion_get_with_http_info(source_lang, word_id, region, app_id, app_key, **kwargs)  # noqa: E501
            return data

    def entries_source_lang_word_id_regionsregion_get_with_http_info(self, source_lang, word_id, region, app_id, app_key, **kwargs):  # noqa: E501
        """Specify GB or US dictionary for English entry search  # noqa: E501

         USe this filter to restrict the lookup to either our Oxford Dictionary of English (GB) or New Oxford American Dictionary (US).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.entries_source_lang_word_id_regionsregion_get_with_http_info(source_lang, word_id, region, app_id, app_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str source_lang: IANA language code (required)
        :param str word_id: An Entry identifier. Case-sensitive. (required)
        :param str region: Region filter parameter. gb = Oxford Dictionary of English. us = New Oxford American Dictionary. (required)
        :param str app_id: App ID Authentication Parameter (required)
        :param str app_key: App Key Authentication Parameter (required)
        :return: RetrieveEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source_lang', 'word_id', 'region', 'app_id', 'app_key']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method entries_source_lang_word_id_regionsregion_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source_lang' is set
        if ('source_lang' not in params or
                params['source_lang'] is None):
            raise ValueError("Missing the required parameter `source_lang` when calling `entries_source_lang_word_id_regionsregion_get`")  # noqa: E501
        # verify the required parameter 'word_id' is set
        if ('word_id' not in params or
                params['word_id'] is None):
            raise ValueError("Missing the required parameter `word_id` when calling `entries_source_lang_word_id_regionsregion_get`")  # noqa: E501
        # verify the required parameter 'region' is set
        if ('region' not in params or
                params['region'] is None):
            raise ValueError("Missing the required parameter `region` when calling `entries_source_lang_word_id_regionsregion_get`")  # noqa: E501
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `entries_source_lang_word_id_regionsregion_get`")  # noqa: E501
        # verify the required parameter 'app_key' is set
        if ('app_key' not in params or
                params['app_key'] is None):
            raise ValueError("Missing the required parameter `app_key` when calling `entries_source_lang_word_id_regionsregion_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'source_lang' in params:
            path_params['source_lang'] = params['source_lang']  # noqa: E501
        if 'word_id' in params:
            path_params['word_id'] = params['word_id']  # noqa: E501
        if 'region' in params:
            path_params['region'] = params['region']  # noqa: E501

        query_params = []

        header_params = {}
        if 'app_id' in params:
            header_params['app_id'] = params['app_id']  # noqa: E501
        if 'app_key' in params:
            header_params['app_key'] = params['app_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/entries/{source_lang}/{word_id}/regions={region}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RetrieveEntry',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
